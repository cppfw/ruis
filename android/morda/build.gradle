apply plugin: 'com.android.library'
apply plugin: 'com.ydq.android.gradle.native-aar.export' // must go after android gradle plugin
apply plugin: 'com.ydq.android.gradle.native-aar.import' // must go after android gradle plugin

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                targets "morda"
            }
        }
    }

    nativeBundleExport {
        headerDir = "${project.projectDir}/../../src/morda"
        bundleStatic = true
        includeHeaderFilter.add("**/*.hpp")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {}
    }

    // Encapsulates your external native build configurations.
    externalNativeBuild {
        // Encapsulates your CMake build configurations.
        cmake {
            // Provides a relative path to your CMake build script.
            path "CMakeLists.txt"
        }
    }
}

repositories {
    maven {
        url 'http://gagis.hopto.org/nexus/repository/android/'
    }
}
dependencies {
    implementation 'io.github.cppfw:utki:+'
    implementation 'io.github.cppfw:papki:+'
    implementation 'io.github.cppfw:r4:+'
    implementation 'io.github.cppfw:treeml:+'
    implementation 'io.github.cppfw:svgren:+'
    implementation 'io.github.cppfw:png:+'
    implementation 'io.github.cppfw:jpeg:+'
    implementation 'io.github.cppfw:freetype:+'
}


// copy and rename release AAR to unified name
def aarName = name

task copy_aar(type: Zip) {
    archiveFileName = aarName + "-\$(version).aar.in"
    destinationDirectory = file("../")

    from zipTree("build/outputs/aar/" + aarName + "-static-release.aar")

    // pack morda resource files to AAR
    from("../../res/morda_res"){
        into('assets/morda_res')
    }
}

afterEvaluate {
    copy_aar.dependsOn(assembleRelease)
}